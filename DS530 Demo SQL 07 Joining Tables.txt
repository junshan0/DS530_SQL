CREATE TABLE Instructor (
    Instructor_Name varchar(20) PRIMARY KEY,
    Instructor_Affiliation char(10)
);

CREATE TABLE Student (
    Student_ID int PRIMARY KEY,
    Student_Name varchar(100) NOT NULL,
    Student_DOB Date,
    Address varchar(100),
    City varchar(100),
    State char(2),
    Zip char(5)
);

CREATE TABLE Course (
    Course_ID INT PRIMARY KEY,
    Course_Name varchar(100) NOT NULL,
    Instructor_Name varchar(20),
    Tuition DECIMAL(7,2)
);

CREATE TABLE Registration (
    Student_ID INT,
    Student_Name varchar(100),
    Course_ID INT,
    Course_Name varchar(100),
    Registration_Number INT,
    Registration_Date DATE,
    Actual_Tuition DECIMAL(7,2),
    PRIMARY KEY (Student_ID, Course_ID)
);

INSERT INTO Student VALUES (101, 'Luke Skywalker', TO_DATE('2000-01-01', 'YYYY-MM-DD'), 'Lars Moisture Farm', 'Tatooine', 'NY', '10001');

INSERT INTO Course VALUES (1, 'Introduction to the Force', 'Obi-wan Kenobi', 200);
INSERT INTO Course VALUES (2, 'Moisture Farming for Dummies', 'Owen Lars', 100);
INSERT INTO Course VALUES (3, 'Throat Choking 101', 'Darth Sidious', 999.99);
INSERT INTO Course VALUES (4, 'Dogabah Surviving Camp', 'Yoda', 2.99);
INSERT INTO Course VALUES (5, 'Lightsaber Fighting', 'Obi-wan Kenobi', 299);
INSERT INTO Course VALUES (6, 'Becoming a Jedi Ghost', 'Yoda', 299);

INSERT INTO Instructor VALUES ('Obi-wan Kenobi', 'Jedi');
INSERT INTO Instructor VALUES ('Anakin Skywalker', 'Jedi');
INSERT INTO Instructor VALUES ('Yoda', 'Jedi');
INSERT INTO Instructor VALUES ('Darth Sidious', 'Sith');

INSERT INTO Registration VALUES (101, 'Luke Skywalker', 1, 'Introduction to the Force', 100, TO_DATE('2019-10-10', 'YYYY-MM-DD'), 180);
INSERT INTO Registration VALUES (101, 'Luke Skywalker', 2, 'Moisture Farming for Dummies', 101, TO_DATE('2019-10-10', 'YYYY-MM-DD'), NULL);
INSERT INTO Registration VALUES (101, 'Luke Skywalker', 3, 'Lightsaber Fighting with Dad', 102, TO_DATE('2019-01-23', 'YYYY-MM-DD'), 50);
INSERT INTO Registration VALUES (102, 'Leah Skywalker', 1, 'Introduction to the Force', 103, TO_DATE('2019-10-10', 'YYYY-MM-DD'), 200);
INSERT INTO Registration VALUES (102, 'Leah Skywalker', 7, 'Public Speaking', 104, TO_DATE('2019-10-10', 'YYYY-MM-DD'), 500);


------------------------------------------------
-- Joining Tables
------------------------------------------------

-- Note the comma!!!
SELECT Instructor_Affiliation
FROM Instructor, Course   
WHERE Instructor.Instructor_Name = Course.Instructor_Name;

-- Will fail because Instructor_Name exists in both tables
SELECT Course_Name, Instructor_Name
FROM Instructor i, Course c
WHERE Instructor.Instructor_Name = Course.Instructor_Name;

SELECT c.Course_Name, i.Instructor_Name
FROM Instructor i, Course c
WHERE i.Instructor_Name = c.Instructor_Name;

------------------------------------------------
-- Joining with JOIN
------------------------------------------------

SELECT c.Course_Name, i.Instructor_Name
FROM Instructor i, Course c
WHERE i.Instructor_Name = c.Instructor_Name
AND c.Course_Name LIKE '%Force%';

SELECT c.Course_Name, i.Instructor_Name
FROM Instructor i
JOIN Course c
  ON i.Instructor_Name = c.Instructor_Name
WHERE c.Course_Name LIKE '%Force%';

------------------------------------------------
-- Multi Table Join
------------------------------------------------

SELECT c.Course_Name, s.Student_Name
FROM Registration r
JOIN Student s
  ON r.Student_ID = s.Student_ID
JOIN Course c
  ON r.Course_ID = c.Course_ID;

SELECT c.Course_Name, i.Instructor_Affiliation
FROM Registration r
JOIN Course c
  ON r.Course_ID = c.Course_ID
JOIN Instructor i
  on c.Instructor_Name = i.Instructor_Name;

SELECT c.Course_Name, i.Instructor_Affiliation, s.Student_Name
FROM Registration r
JOIN Student s
  ON r.Student_ID = s.Student_ID
JOIN Course c
  ON r.Course_ID = c.Course_ID
JOIN Instructor i
  on c.Instructor_Name = i.Instructor_Name;

------------------------------------------------
-- Advanced Joining
------------------------------------------------

-- Joining on multiple columns
CREATE TABLE Sample1 (
ID1 int, ID2 int
);

CREATE TABLE Sample2 (
ID1 int, ID2 int
);

INSERT INTO Sample1 VALUES (1, 1);
INSERT INTO Sample1 VALUES (2, 2);
INSERT INTO Sample1 VALUES (3, 3);

INSERT INTO Sample2 VALUES (1, 1);
INSERT INTO Sample2 VALUES (2, 2);
INSERT INTO Sample2 VALUES (2, 3);
INSERT INTO Sample2 VALUES (4, 4);

SELECT * 
FROM Sample1 s1
JOIN Sample2 s2
  ON s1.ID1 = s2.ID1
 AND s1.ID2 = s2.ID2;

DROP TABLE Sample1;
DROP TABLE Sample2;

-- Self join
CREATE TABLE Employee (
Employee VARCHAR(10),
Supervisor VARCHAR(10));

INSERT INTO Employee VALUES ('Bill', 'Alice');
INSERT INTO Employee VALUES ('Tom', 'Alice');
INSERT INTO Employee VALUES ('Alice', 'Rachel');

SELECT s.Supervisor
FROM Employee e
JOIN Employee s
On e.supervisor = s.employee;

DROP TABLE Employee;

------------------------------------------------
-- Outer Join
------------------------------------------------

-- Compare the result of following two Outer Joins
--     with table order switched
SELECT c.Course_Name, i.Instructor_Name
FROM Instructor i
LEFT OUTER JOIN Course c
  on c.Instructor_Name = i.Instructor_Name;

SELECT c.Course_Name, i.Instructor_Name
FROM Course c
LEFT OUTER JOIN Instructor i
  on c.Instructor_Name = i.Instructor_Name;

-- Left Outer Join vs Right Outer Join
SELECT c.Course_Name, i.Instructor_Name
FROM Course c
RIGHT OUTER JOIN Instructor i
  on c.Instructor_Name = i.Instructor_Name;


------------------------------------------------
-- Join on key
------------------------------------------------


-- JOIN without ON
SELECT *
FROM Course c, Instructor i;

-- JOIN without ON
SELECT *
FROM Course c
JOIN Instructor i;

SELECT *
FROM Course c
CROSS JOIN Instructor i;

CREATE TABLE Sample1 (
ID1 int, ID2 int
);

CREATE TABLE Sample2 (
ID1 int, ID2 int
);

INSERT INTO Sample1 VALUES (1, 101);
INSERT INTO Sample1 VALUES (1, 102);
INSERT INTO Sample1 VALUES (2, 2);

INSERT INTO Sample2 VALUES (1, 1001);
INSERT INTO Sample2 VALUES (1, 1002);
INSERT INTO Sample2 VALUES (2, 2);

-- JOIN with partial matching
SELECT * 
FROM Sample1 s1
JOIN Sample2 s2
  ON s1.ID1 = s2.ID1;

DROP TABLE Sample1;
DROP TABLE Sample2;


------------------------------------------------
-- Referential Integrity
------------------------------------------------

CREATE TABLE products (
    product_no integer PRIMARY KEY,
    name text
);

CREATE TABLE orders (
    order_id integer PRIMARY KEY,
    product_no integer REFERENCES products (product_no)
);

-- Will fail because product_no 101 is not in Products table
INSERT INTO orders VALUES (1, 101);

-- Will work after product_no 101 is inserted into Products table
INSERT INTO Products VALUES (101, 'Product 1');
INSERT INTO Orders VALUES (1, 101);

-- Will fail because product_no 101 is still in Orders table
DELETE FROM Products where Product_No = 101;

DELETE FROM Orders;
DELETE FROM Products;

-- Will fail because Orders table is dependent on Products table
drop table products;

-- Must drop Orders table first
drop table orders;
drop table products;

------------------------------------------------
-- Filtering from Another Table
------------------------------------------------

SELECT * FROM Course
WHERE Instructor_Name IN (
SELECT Instructor_Name FROM Instructor
WHERE Instructor_Affiliation = 'Jedi');

SELECT Course.* 
FROM Course JOIN Instructor
on Course.Instructor_Name = Instructor.Instructor_Name 
WHERE Instructor_Affiliation = 'Jedi';

SELECT * FROM Course 
WHERE EXISTS (
	SELECT * FROM Instructor
	WHERE Instructor_Affiliation = 'Jedi'
	AND Course.Instructor_Name = Instructor.Instructor_Name
);




DROP TABLE Student;
DROP TABLE Course;
DROP TABLE Instructor;
DROP TABLE Registration;
